silacRI.plot(ratios, L_intensities, H_intensities)
z_scores[abs(z_scores[,3])>=2,3]
ratios[abs(z_scores[,3])>=2,3]
log2(L_intensities[abs(z_scores[,3])>=2,3])
selected_intensities = (log2(L_intensities[abs(z_scores[,3])>=2,3]) + log2(H_intensities[abs(z_scores[,3])>=2,3])) /2
points(selected_intensities, selected_ratios, col="green", pch=20)
selected_ratios = ratios[abs(z_scores[,3])>=2,3]
selected_intensities = (log2(L_intensities[abs(z_scores[,3])>=2,3]) + log2(H_intensities[abs(z_scores[,3])>=2,3])) /2
points(selected_intensities, selected_ratios, col="green", pch=20)
silacRI.plot = function(ratios, L_intensities, H_intensities){
VAL_idx = 3
cols = c("blue", "red")
linecols = c("darkblue", "darkred")
for(i in VAL_idx:ncol(ratios)){
R = ratios[, c(1:(VAL_idx-1),i)]
R[, VAL_idx] = log2(R[,VAL_idx])
I = L_intensities[, c(1:(VAL_idx-1),i)]
I[,VAL_idx] = (log2(I[,VAL_idx]) + log2(H_intensities[, i]))/2
RI = merge(R, I, by=c("uniprot_id","Sequence"))
#RI.omitNA = na.omit(RI)
RI.omitNA = RI
if(i == VAL_idx){
fun=plot
}else{
fun=points
}
fun(RI.omitNA[,VAL_idx+1], RI.omitNA[,VAL_idx], pch=20, col=cols[i-VAL_idx+1], xlab="Log2(LH)", ylab="Avg(Log2(L)+Log2(H))")
I.fit = lowess(RI.omitNA[,VAL_idx+1], RI.omitNA[,VAL_idx], f=0.4)
lines(I.fit$x, I.fit$y, lwd=3, col=linecols[i-VAL_idx+1])
}
legend("topright", legend=colnames(ratios)[VAL_idx:ncol(ratios)], fill=cols, cex=.6)
}
silacRI.plot(ratios, L_intensities, H_intensities)
silacRI.plot = function(ratios, L_intensities, H_intensities){
VAL_idx = 3
cols = c("blue", "red")
linecols = c("darkblue", "darkred")
for(i in VAL_idx:ncol(ratios)){
R = ratios[, c(1:(VAL_idx-1),i)]
R[, VAL_idx] = log2(R[,VAL_idx])
I = L_intensities[, c(1:(VAL_idx-1),i)]
I[,VAL_idx] = (log2(I[,VAL_idx]) + log2(H_intensities[, i]))/2
RI = merge(R, I, by=c("uniprot_id","Sequence"))
RI.omitNA = na.omit(RI)
#RI.omitNA = RI
if(i == VAL_idx){
fun=plot
}else{
fun=points
}
fun(RI.omitNA[,VAL_idx+1], RI.omitNA[,VAL_idx], pch=20, col=cols[i-VAL_idx+1], xlab="Log2(LH)", ylab="Avg(Log2(L)+Log2(H))")
I.fit = lowess(RI.omitNA[,VAL_idx+1], RI.omitNA[,VAL_idx], f=0.4)
lines(I.fit$x, I.fit$y, lwd=3, col=linecols[i-VAL_idx+1])
}
legend("topright", legend=colnames(ratios)[VAL_idx:ncol(ratios)], fill=cols, cex=.6)
}
all = merge(ratios, L_intensities, by=c("uniprot_id", "Sequence"))
all = merge(ratios, H_intensities, by=c("uniprot_id", "Sequence"))
all = merge(ratios, L_intensities, by=c("uniprot_id", "Sequence"))
all = merge(all, H_intensities, by=c("uniprot_id", "Sequence"))
all = merge(all, z_scores,by=c("uniprot_id", "Sequence"))
View(RI_omitNA)
RI.omitNA = silacRI.plot(ratios, L_intensities, H_intensities)
silacRI.plot = function(ratios, L_intensities, H_intensities){
VAL_idx = 3
cols = c("blue", "red")
linecols = c("darkblue", "darkred")
for(i in VAL_idx:ncol(ratios)){
R = ratios[, c(1:(VAL_idx-1),i)]
R[, VAL_idx] = log2(R[,VAL_idx])
I = L_intensities[, c(1:(VAL_idx-1),i)]
I[,VAL_idx] = (log2(I[,VAL_idx]) + log2(H_intensities[, i]))/2
RI = merge(R, I, by=c("uniprot_id","Sequence"))
RI.omitNA = na.omit(RI)
#RI.omitNA = RI
if(i == VAL_idx){
fun=plot
}else{
fun=points
}
fun(RI.omitNA[,VAL_idx+1], RI.omitNA[,VAL_idx], pch=20, col=cols[i-VAL_idx+1], xlab="Log2(LH)", ylab="Avg(Log2(L)+Log2(H))")
I.fit = lowess(RI.omitNA[,VAL_idx+1], RI.omitNA[,VAL_idx], f=0.4)
lines(I.fit$x, I.fit$y, lwd=3, col=linecols[i-VAL_idx+1])
}
legend("topright", legend=colnames(ratios)[VAL_idx:ncol(ratios)], fill=cols, cex=.6)
RI.omitNA
}
RI.omitNA = silacRI.plot(ratios, L_intensities, H_intensities)
View(RI.omitNA)
silacRI.plot = function(ratios, L_intensities, H_intensities){
VAL_idx = 3
cols = c("blue", "red")
linecols = c("darkblue", "darkred")
for(i in VAL_idx:ncol(ratios)){
R = ratios[, c(1:(VAL_idx-1),i)]
R[, VAL_idx] = log2(R[,VAL_idx])
I = L_intensities[, c(1:(VAL_idx-1),i)]
I[,VAL_idx] = (log2(I[,VAL_idx]) + log2(H_intensities[, i]))/2
RI = merge(R, I, by=c("uniprot_id","Sequence"))
RI.omitNA = na.omit(RI)
#RI.omitNA = RI
if(i == VAL_idx){
fun=plot
}else{
fun=points
}
fun(RI.omitNA[,VAL_idx+1], RI.omitNA[,VAL_idx], pch=20, col=cols[i-VAL_idx+1], xlab="Log2(LH)", ylab="Avg(Log2(L)+Log2(H))")
I.fit = lowess(RI.omitNA[,VAL_idx+1], RI.omitNA[,VAL_idx], f=0.4)
lines(I.fit$x, I.fit$y, lwd=3, col=linecols[i-VAL_idx+1])
}
legend("topright", legend=colnames(ratios)[VAL_idx:ncol(ratios)], fill=cols, cex=.6)
}
write.table(z_scores, file="../../Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-z_scores.txt", eol="\n", sep="\t", quote=F, row.names=F, col.names=T)
plot(ratios$Vif_H_GFP_L, z_scores$Vif_H_GFP_L)
plot(log2(ratios$Vif_H_GFP_L), z_scores$Vif_H_GFP_L)
plot(log2(ratios$Vif_H_GFP_L), z_scores$Vif_H_GFP_L, pch=20)
ratios = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-ratios-ubi_unique_filtered.txt")
L_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-L_intensities-ubi_unique_filtered.txt")
H_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-H_intensities-ubi_unique_filtered.txt")
ratios = silacRI.normalize(ratios)
L_intensities = silacRI.normalize(L_intensities)
H_intensities = silacRI.normalize(H_intensities)
z_scores = silacRI.IDZscore(ratios, L_intensities, H_intensities)
is.null(ratios)
is.na(ratios)
is.na(z_scores)
View(L_intensities)
View(z_scores)
?count
View(ratios)
View(H_intensities)
View(L_intensities)
ratios = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-ratios-ubi_unique_filtered.txt")
L_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-L_intensities-ubi_unique_filtered.txt")
H_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-H_intensities-ubi_unique_filtered.txt")
VAL_idx = 3
R = ratios[, c(1:(VAL_idx-1),i)]
R[, VAL_idx] = log2(R[,VAL_idx])
I = L_intensities[, c(1:(VAL_idx-1),i)]
I[,VAL_idx] = (log2(I[,VAL_idx]) + log2(H_intensities[, i]))/2
View(I)
View(R)
R = ratios[is.na()==F, c(1:(VAL_idx-1),i)]
R = ratios[, c(1:(VAL_idx-1),i)]
omit.NA(R)
omit.na(R)
na.omit(R)
R = na.omit(R)
View(R)
R[, VAL_idx] = log2(R[,VAL_idx])
col_idx = c(1:(VAL_idx-1),i)
col_idx
col_idxs = c(1:(VAL_idx-1),i)
R[, VAL_idx] = log2(R[,VAL_idx])
R = ratios[, col_idxs]
R = na.omit(R)
R[, VAL_idx] = log2(R[,VAL_idx])
View(R)
I = L_intensities[, col_idxs]
IL = na.omit(IL)
IL = L_intensities[, col_idxs]
IL = na.omit(IL)
View(IL)
View(L_intensities)
?max
?is.Inf
?ingf
?inf
is.infinite
?is.infinite
ratios = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-ratios-ubi_unique_filtered.txt")
L_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-L_intensities-ubi_unique_filtered.txt")
H_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-H_intensities-ubi_unique_filtered.txt")
silacRI.plot(ratios, L_intensities, H_intensities)
ratios = silacRI.normalize(ratios)
L_intensities = silacRI.normalize(L_intensities)
H_intensities = silacRI.normalize(H_intensities)
z_scores = silacRI.IDZscore(ratios, L_intensities, H_intensities)
silacRI.plot(ratios, L_intensities, H_intensities)
View(ratios)
View(L_intensities)
View(z_scores)
write.table(z_scores, file="../../Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-z_scores.txt", eol="\n", sep="\t", quote=F, row.names=F, col.names=T)
plot(z_scores$Vif_H_GFP_L, z_scores$GFP_H_Vif_L)
plot(z_scores$Vif_H_GFP_L, z_scores$GFP_H_Vif_L, pch=20)
write.table(z_scores, file="../../Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-z_scores.txt", eol="\n", sep="\t", quote=F, row.names=F, col.names=T)
ratios = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-ratios-ubi_unique_filtered.txt")
L_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-L_intensities-ubi_unique_filtered.txt")
H_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-H_intensities-ubi_unique_filtered.txt")
ratios = silacRI.normalize(ratios)
L_intensities = silacRI.normalize(L_intensities)
H_intensities = silacRI.normalize(H_intensities)
z_scores = silacRI.IDZscore(ratios, L_intensities, H_intensities)
write.table(z_scores, file="../../Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-z_scores.txt", eol="\n", sep="\t", quote=F, row.names=F, col.names=T)
?normalizeBetweenArrays
library(limma)
silacRI.plot = function(ratios, L_intensities, H_intensities){
VAL_idx = 3
cols = c("blue", "red")
linecols = c("darkblue", "darkred")
for(i in VAL_idx:ncol(ratios)){
R = ratios[, c(1:(VAL_idx-1),i)]
R[, VAL_idx] = log2(R[,VAL_idx])
I = L_intensities[, c(1:(VAL_idx-1),i)]
I[,VAL_idx] = (log2(I[,VAL_idx]) + log2(H_intensities[, i]))/2
RI = merge(R, I, by=c("uniprot_id","Sequence"))
RI.omitNA = na.omit(RI)
#RI.omitNA = RI
if(i == VAL_idx){
fun=plot
}else{
fun=points
}
fun(RI.omitNA[,VAL_idx+1], RI.omitNA[,VAL_idx], pch=20, col=cols[i-VAL_idx+1], xlab="Avg(Log2(L)+Log2(H))", ylab="Log2(L/H)")
I.fit = lowess(RI.omitNA[,VAL_idx+1], RI.omitNA[,VAL_idx], f=0.4)
lines(I.fit$x, I.fit$y, lwd=3, col=linecols[i-VAL_idx+1])
}
legend("topright", legend=colnames(ratios)[VAL_idx:ncol(ratios)], fill=cols, cex=.6)
}
silacRI.normalize = function(df, method="scale"){
VAL_idx = 3
df[, VAL_idx:ncol(df)] = as.data.frame(normalizeBetweenArrays(as.matrix(df[, VAL_idx:ncol(df)], method=method)))
df
}
# return z-scores
silacRI.IDZscore = function(ratios, H_intensities, L_intensities){
VAL_idx = 3
z_scores = ratios[,1:(VAL_idx-1)]
for(i in VAL_idx:ncol(ratios)){
col_idxs = c(1:(VAL_idx-1),i)
R = ratios[, col_idxs]
R = na.omit(R)
R[, VAL_idx] = log2(R[,VAL_idx])
IL = L_intensities[, col_idxs]
IL = na.omit(IL)
IH = H_intensities[, col_idxs]
I[,VAL_idx] = (log2(I[,VAL_idx]) + log2(H_intensities[, i]))/2
RI = merge(R, I, by=c("uniprot_id","Sequence"), all=T)
RI_omitNA = na.omit(RI)
colnames(RI_omitNA)[3:4] = c("Ratio", "Intensity")
RI_omitNA = sqldf("select * from RI_omitNA order by Intensity ASC")
bin_size = 200
bins=ceiling(nrow(RI_omitNA)/bin_size) ## 200 is a good bin size
break_points = c(1,(seq(1,bins) * bin_size))
break_points[length(break_points)] = nrow(RI_omitNA)
break_values = RI_omitNA$Intensity[break_points]
RI_omitNA = cbind(RI_omitNA, cut(RI_omitNA$Intensity, break_values, include.lowest=T,right=F))
colnames(RI_omitNA)[5] = "bin"
RI_omitNA_bins = sqldf("select bin, avg(Ratio) as 'I_mean', stdev(Ratio) as 'I_sd' from RI_omitNA group by bin")
RI_2 = sqldf("select RI.uniprot_id, RI.Sequence, RI.Ratio / RIB.I_sd as 'IDZ' from RI_omitNA RI left join RI_omitNA_bins RIB on RI.bin= RIB.bin")
z_scores = merge(z_scores, RI_2, by=c("uniprot_id", "Sequence"), all=T)
}
colnames(z_scores) = colnames(ratios)
z_scores
}
ratios = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-ratios-ubi_unique_filtered.txt")
L_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-L_intensities-ubi_unique_filtered.txt")
H_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-H_intensities-ubi_unique_filtered.txt")
pdf("~/Projects/HPCKrogan/Data/HIV-proteomics/Plots/Ub-scans/Jurkat_VIF_RI_plot.pdf", width=7, height=5)
silacRI.plot(ratios, L_intensities, H_intensities)
dev.off()
ratios = silacRI.normalize(ratios)
L_intensities = silacRI.normalize(L_intensities)
H_intensities = silacRI.normalize(H_intensities)
z_scores = silacRI.IDZscore(ratios, L_intensities, H_intensities)
plot(z_scores$Vif_H_GFP_L, z_scores$GFP_H_Vif_L, pch=20)
write.table(z_scores, file="../../Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-z_scores.txt", eol="\n", sep="\t", quote=F, row.names=F, col.names=T)
pdf("~/Projects/HPCKrogan/Data/HIV-proteomics/Plots/Ub-scans/Jurkat_VIF_RI_normalized_plot.pdf", width=7, height=5)
silacRI.plot(ratios, L_intensities, H_intensities)
dev.off()
ratios = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vpr-Ub/processed_ratio_intensity/042313-tlj-57-60-matrix-ratios-ubi_unique_filtered.txt")
L_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vpr-Ub/processed_ratio_intensity/042313-tlj-57-60-matrix-L_intensities-ubi_unique_filtered.txt")
H_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vpr-Ub/processed_ratio_intensity/042313-tlj-57-60-matrix-H_intensities-ubi_unique_filtered.txt")
pdf("~/Projects/HPCKrogan/Data/HIV-proteomics/Plots/Ub-scans/Jurkat_VPR_RI_plot.pdf", width=7, height=5)
silacRI.plot(ratios, L_intensities, H_intensities)
dev.off()
ratios = silacRI.normalize(ratios)
L_intensities = silacRI.normalize(L_intensities)
H_intensities = silacRI.normalize(H_intensities)
pdf("~/Projects/HPCKrogan/Data/HIV-proteomics/Plots/Ub-scans/Jurkat_VPR_RI_normalized_plot.pdf", width=7, height=5)
silacRI.plot(ratios, L_intensities, H_intensities)
dev.off()
ratios = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vpu-Ub/processed_ratio_intensity/051313-tlj-52-55-matrix-ratios-ubi_unique_filtered.txt")
L_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vpu-Ub/processed_ratio_intensity/051313-tlj-52-55-matrix-L_intensities-ubi_unique_filtered.txt")
H_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vpu-Ub/processed_ratio_intensity/051313-tlj-52-55-matrix-H_intensities-ubi_unique_filtered.txt")
pdf("~/Projects/HPCKrogan/Data/HIV-proteomics/Plots/Ub-scans/Jurkat_VPU_RI_plot.pdf", width=7, height=5)
silacRI.plot(ratios, L_intensities, H_intensities)
dev.off()
ratios = silacRI.normalize(ratios)
L_intensities = silacRI.normalize(L_intensities)
H_intensities = silacRI.normalize(H_intensities)
pdf("~/Projects/HPCKrogan/Data/HIV-proteomics/Plots/Ub-scans/Jurkat_VPU_RI_plot_normalized.pdf", width=7, height=5)
silacRI.plot(ratios, L_intensities, H_intensities)
dev.off()
ratios = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-ratios-ubi_unique_filtered.txt")
L_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-L_intensities-ubi_unique_filtered.txt")
H_intensities = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-H_intensities-ubi_unique_filtered.txt")
pdf("~/Projects/HPCKrogan/Data/HIV-proteomics/Plots/Ub-scans/Jurkat_VIF_RI_plot.pdf", width=7, height=5)
silacRI.plot(ratios, L_intensities, H_intensities)
dev.off()
ratios = silacRI.normalize(ratios)
L_intensities = silacRI.normalize(L_intensities)
H_intensities = silacRI.normalize(H_intensities)
pdf("~/Projects/HPCKrogan/Data/HIV-proteomics/Plots/Ub-scans/Jurkat_VIF_RI_normalized_plot.pdf", width=7, height=5)
silacRI.plot(ratios, L_intensities, H_intensities)
dev.off()
test_args = c("-d", str_join("processed/",PREFIX,"-matrix-max.txt"), "-o",str_join("processed/",PREFIX,"-differential.txt"), "-r", "FALSE", "-t", TECH_REPLICAS, "-e", EXPERIMENTS, "-b", BIOL_REPLICAS, "-m", str_join("processed/",DESIGN), "-n", NORMALIZATION, "-u", ORGANISM)
#! /usr/bin/Rscript --vanilla --default-packages=utils
library(limma)
library(stringr)
library(sqldf)
library(optparse)
library(compiler)
scriptdir = "~/Projects/HPCKrogan/Scripts/Rscripts/"
source(str_join(scriptdir, "Conversion/AnnotateWithUniprot.R"))
options(warn=-1)
prepare_data = function(data_frame, convert_to_logs=T, normalize="none"){
data_matrix = as.matrix(data_frame[,3:ncol(data_frame)])
print(str_join("NORMALIZATION: ",normalize))
if(normalize!="none"){
data_matrix = normalizeBetweenArrays(data_matrix, method=normalize)
}
if(convert_to_logs){
data_matrix[data_matrix==0]=1
data_matrix = log2(data_matrix)
}
as.data.frame(data_matrix)
}
make_design_vector = function(exp_samples, biol_replicates, tech_replicates){
rep(1:exp_samples, each=biol_replicates*tech_replicates)
}
make_biol_tech_vector = function(exp_samples, biol_replicates, tech_replicates){
rep(1:(exp_samples*biol_replicates), each=tech_replicates)
}
make_sample_names = function(exp_samples){
str_join("sample_", 1:exp_samples)
}
make_design_matrix = function(design_vector, sample_names){
keys = unique(design_vector)
dm = model.matrix(~0 + factor(design_vector))
colnames(dm) = sample_names
dm
}
make_contrast_vector = function(sample_names){
contrasts = c()
if(length(sample_names) >= 2){
for(i in 1:(length(sample_names)-1)){
for(j in (i+1):length(sample_names)){
contrasts = c(contrasts, str_join(sample_names[i],"-",sample_names[j]))
}
}
}
makeContrasts(contrasts=contrasts, levels=sample_names)
}
make_contrast_vector_from_file = function(file, sample_names){
contrast_file = read.delim(file)
makeContrasts(contrasts=contrast_file$contrasts, levels=sample_names)
}
do_limma = function(data_matrix, design_matrix, contrasts="none", biol_tech_vector=NULL, with_dup_cor=T){
if(with_dup_cor ==T){
cor_fit <- duplicateCorrelation(data_matrix,design_matrix,block=biol_tech_vector)
print(str_join("cor.fit: ",cor_fit$cor))
}
if(with_dup_cor == T){
if(is.nan(cor_fit$cor)== F & is.na(cor_fit$cor) == F){
print("fitting with dup.cor")
lin_fit = lmFit(data_matrix,design_matrix, block=biol_tech_vector, cor=cor_fit$cor)
}else{
lin_fit = lmFit(data_matrix,design_matrix)
}
}else{
lin_fit = lmFit(data_matrix,design_matrix)
}
if(contrasts == "none"){
eb = eBayes(lin_fit)
tmp = topTable(eb, adjust.method="BH",number=Inf)
tmp1 = cbind(rownames(tmp), tmp[,c(1,4)])
exp_name = colnames(design_matrix)[1]
colnames(tmp1) =  c("ID",str_join(exp_name,"_logFC"), str_join(exp_name,"_adjPVal"))
tmp = tmp1
}else{
contrasts.fit = eBayes(contrasts.fit(lin_fit, contrasts))
#   test_results = decideTests(contrasts.fit, method="global")
#   test_results_summary = summary(test_results)
for(i in 1:ncol(contrasts)){
test_differentials = topTable(contrasts.fit, coef=i, adjust.method="BH",number=Inf)
tmp1 = cbind(rownames(test_differentials), test_differentials[,c(1,5)])
contrast = colnames(contrasts)[i]
colnames(tmp1) = c("ID",str_join(contrast,"_logFC"), str_join(contrast,"_adjPVal"))
if(i==1){
tmp = tmp1
}else{
tmp = merge(tmp, tmp1, by="ID")
}
}
}
tmp
}
Limma.main = function(data_file, exp_samples, design_matrix_file="",normalize_method="none", contrast_file="none", biol_replicates, tech_replicates, output_file, convert_to_logs=T, with_dup_cor=T, organism="HUMAN"){
data = read.delim(data_file, stringsAsFactors=F)
data_matrix = prepare_data(data, convert_to_logs=T, normalize=normalize_method)
biol_tech_vector = make_biol_tech_vector(exp_samples, biol_replicates, tech_replicates)
if(design_matrix_file==""){
sample_names = make_sample_names(exp_samples)
design_vector = make_design_vector(exp_samples, biol_replicates, tech_replicates)
design_matrix = make_design_matrix(design_vector, sample_names)
}else{
print(str_join("reading design matrix from file: ", design_matrix_file))
design_matrix = read.delim(design_matrix_file)
sample_names = colnames(design_matrix)
}
if(contrast_file!="none"){
print(str_join("reading contrasts from file: ", contrast_file))
contrasts = make_contrast_vector_from_file(contrast_file, sample_names)
}else{
contrasts = contrast_file
}
differential_results = do_limma(data_matrix, design_matrix, contrasts, biol_tech_vector, with_dup_cor)
tmp = cbind(rownames(data), data[,1:2])
colnames(tmp)[1] = "ID"
output_frame = merge(tmp, differential_results, by ="ID")
output_frame_annotated = annotate_with_uniprot(output_frame[,2:ncol(output_frame)], key="uniprot_id", organism=organism)
write.table(output_frame_annotated,file=output_file,eol="\n",sep="\t",quote=F,row.names=F,col.names=T)
}
## READ OPTIONS
option_list <- list(
make_option(c("-v", "--verbose"), action="store_true", default=TRUE,
help="Print extra output [default]"),
make_option(c("-q", "--quietly"), action="store_false",
dest="verbose", help="Print little output"),
make_option(c("-l", "--convert_to_logs"), default=TRUE,
help="Flag to convert values in data-file to log2 values"),
make_option(c("-d", "--data_file"),
help="data file containing values"),
make_option(c("-o", "--output_file"),
help="output file for differential peptides"),
make_option(c("-e", "--exp_samples"), type="integer",
help="number of unique experimental sample sources"),
make_option(c("-b", "--biol_reps"), type="integer",
help="number of biological replicates for sample sources"),
make_option(c("-t", "--tech_reps"), type="integer",
help="number of technical replicates for sample sources"),
make_option(c("-r", "--dup_cor"), default=TRUE,
help="Flag to estimate duplicate correlation between probes"),
make_option(c("-m", "--design_matrix"),
help="File containing design matrix for the experiment"),
make_option(c("-c", "--contrast_file"), default="none",
help="File containing the contrasts to be made from the design matrix"),
make_option(c("-n", "--normalize_method"), default="none",
help="Normalization method: quantile, cyclicloess, none"),
make_option(c("-u", "--uniprot_organism"), default="HUMAN",
help="Uniprot species identifier to match hits to for more readable output")
)
TESTDIR="~/Projects/HPCKrogan/Data/HIV-proteomics/Combined/"
PREFIX="combined-293-VIF"
NORMALIZATION="scale"
REPLICACOMBINATION="max_ratio"
TECH_REPLICAS=2
BIOL_REPLICAS=2
PVALUE=0.05
MAXQCOLUMN="Ratio_H_L"
FILTER="UBI"
UNIQUE_FILTER=T
DESIGN = "design_TBWT.txt"
EXPERIMENTS=1
ORGANISM="HUMAN"
test_args = c("-d", str_join("processed/",PREFIX,"-matrix-max.txt"), "-o",str_join("processed/",PREFIX,"-differential.txt"), "-r", "FALSE", "-t", TECH_REPLICAS, "-e", EXPERIMENTS, "-b", BIOL_REPLICAS, "-m", str_join("processed/",DESIGN), "-n", NORMALIZATION, "-u", ORGANISM)
setwd(TESTDIR)
parsedArgs = parse_args(OptionParser(option_list = option_list), args = test_args)
Limma.main(data_file=parsedArgs$data_file, design_matrix=parsedArgs$design_matrix, normalize_method=parsedArgs$normalize_method,contrast_file=parsedArgs$contrast_file,exp_samples=parsedArgs$exp_samples, biol_replicates=parsedArgs$biol_reps, tech_replicates=parsedArgs$tech_reps, output_file=parsedArgs$output_file, convert_to_logs=parsedArgs$convert_to_logs, with_dup_cor=parsedArgs$dup_cor, organism=parsedArgs$uniprot_organism)
contrasts = make_contrast_vector(sample_names=sample_names)
ratios = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-ratios-ubi_unique_filtered.txt")
plot(ratios$Vif_H_GFP_L, ratios$GFP_H_Vif_L)
plot(ratios$Vif_H_GFP_L, ratios$GFP_H_Vif_L)
ratios = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-ratios-ubi_unique_filtered.txt")
plot(ratios$Vif_H_GFP_L, ratios$GFP_H_Vif_L)
plot(ratios$Vif_H_GFP_L, ratios$GFP_H_Vif_L)
ratios = read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_ratio_intensity/042313-tlj-59-62-matrix-ratios-ubi_unique_filtered.txt")
plot(ratios$Vif_H_GFP_L, ratios$GFP_H_Vif_L)
plot(log2(ratios$Vif_H_GFP_L), log2(ratios$GFP_H_Vif_L))
plot(log2(ratios$Vif_H_GFP_L), log2(ratios$GFP_H_Vif_L), pch=20, col="gray")
plot(log2(ratios$Vif_H_GFP_L), log2(ratios$GFP_H_Vif_L), pch=20, col="gray", xlim=c(-4,4), ylim=c(-4,4))
abline(h=0,lwd=2, col="darkgrey")
abline(v=0,lwd=2, col="darkgrey")
plot(log2(ratios$Vif_H_GFP_L), log2(ratios$GFP_H_Vif_L), pch=20, col="gray", xlim=c(-4,4), ylim=c(-4,4), xlab="Log2(Vif_H/GFP_L)", ylab="Log2(GFP_H/Vif_L)")
abline(h=0,lwd=2, col="darkgrey")
abline(v=0,lwd=2, col="darkgrey")
plot(log2(ratios$Vif_H_GFP_L), log2(ratios$GFP_H_Vif_L), pch=20, col="gray", xlim=c(-4,4), ylim=c(-4,4), xlab="Log2(Vif_H / GFP_L)", ylab="Log2(GFP_H / Vif_L)")
abline(h=0,lwd=2, col="darkgrey")
abline(v=0,lwd=2, col="darkgrey")
`042313.tlj.59.62.differential` <- read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_reversed_labels/042313-tlj-59-62-differential.txt")
View(`042313.tlj.59.62.differential`)
vif_diff <- read.delim("~/Projects/HPCKrogan/Data/HIV-proteomics/Jurkat-Expression-PTM/Vif-Ub/processed_reversed_labels/042313-tlj-59-62-differential.txt")
plot(vif_diff$VIF_GFP_logFC, -log10(vif_diff$VIF_GFP_adjPVal))
-log10(0.2)
plot(vif_diff$VIF_GFP_logFC, -log10(vif_diff$VIF_GFP_adjPVal) , pch=20)
plot(vif_diff$VIF_GFP_logFC, -log2(vif_diff$VIF_GFP_adjPVal) , pch=20)
plot(vif_diff$VIF_GFP_logFC, -log10(vif_diff$VIF_GFP_adjPVal) , pch=20)
-log10(0.2)
-log10(0.8)
plot(vif_diff$VIF_GFP_logFC, -log10(vif_diff$VIF_GFP_adjPVal) , pch=20, ylab-="FDR as -log10(Q-values)", xlab = "log2 FC")
plot(vif_diff$VIF_GFP_logFC, -log10(vif_diff$VIF_GFP_adjPVal) , pch=20, ylab="FDR as -log10(Q-values)", xlab = "log2 FC")
abline(h=-log10(0.2), col="darkgrey")
?par
abline(v=-1.5, col="darkgrey", lty=2)
abline(v=-1.5, col="darkgrey", lty=2, lwd=2)
abline(v=c(-1.5,1.5), col="darkgrey", lty=2, lwd=2)
plot(vif_diff$VIF_GFP_logFC, -log10(vif_diff$VIF_GFP_adjPVal) , pch=20, ylab="-log10(FDR)", xlab = "log2 FC")
abline(h=-log10(0.2)col="darkgrey", lty=2, lwd=2)
abline(v=c(-1.5,1.5), col="darkgrey", lty=2, lwd=2)
abline(h=-log10(0.2),col="darkgrey", lty=2, lwd=2)
log2(0.05)
